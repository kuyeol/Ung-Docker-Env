version: "3.9"

services:
  # Car Rental services
  # Users service
  users-service:
    image: quay.io/quarkus-in-action/users-service:1.0.0
    container_name: users-service
    network_mode: host
    depends_on:
      - keycloak

  # Reservation service
  reservation-service:
    image: quay.io/quarkus-in-action/reservation-service:1.0.0
    container_name: reservation-service
    network_mode: host
    depends_on:
      - keycloak
      - postgres-reservation
      - rabbitmq

  # Rental service
  rental-service:
    image: quay.io/quarkus-in-action/rental-service:1.0.0
    container_name: rental-service
    network_mode: host
    depends_on:
      - kafka
      - mongodb-rental

  # Inventory service
  inventory-service:
    image: quay.io/quarkus-in-action/inventory-service:1.0.0
    container_name: inventory-service
    network_mode: host
    restart: on-failure # only way I found that works

  #  # Billing service
  billing-service:
    image: quay.io/quarkus-in-action/billing-service:1.0.0
    container_name: billing-service
    network_mode: host
    depends_on:
      - kafka
      - mongodb-billing
      - rabbitmq

  # Keycloak
  postgres-keycloak:
    image: docker.io/library/postgres:14
    restart: always
    container_name: postgres-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: quarkus
      POSTGRES_PASSWORD: quarkus
    ports:
      - "5300:5432"


  keycloak:
    image: quay.io/keycloak/keycloak:23.0.6
    restart: always
    container_name: keycloak
    volumes:
      - "./keycloak-realm.json:/opt/keycloak/data/import/keycloak-realm.json:Z"
    command:
      - start-dev
      - --import-realm
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: quarkus
      DB_PASSWORD: quarkus
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "7777:8080"
    depends_on:
      - postgres-keycloak
#
#
#  keycloak:
#    image: quay.io/keycloak/keycloak:21.0.2
#    container_name: keycloak
#    user: "${UID}"
#    restart: always
#    volumes:
#      - "./keycloak-realm.json:/opt/keycloak/data/import/keycloak-realm.json:Z"
#    command:
#      - start-dev
#      - --import-realm
#    environment:
#      DB_VENDOR: POSTGRES
#      DB_ADDR: postgres
#      DB_DATABASE: keycloak
#      DB_USER: post_user
#      DB_PASSWORD: post_secret
#      KEYCLOAK_ADMIN: admin
#      KEYCLOAK_ADMIN_PASSWORD: admin
#    ports:
#      - "8543:8080"
#    depends_on:
#      - postgres-keycloak

  # Postgres for Reservation service
  postgres-reservation:
    image: docker.io/library/postgres:14
    container_name: postgres-reservation
    environment:
      POSTGRES_DB: quarkus
      POSTGRES_USER: quarkus
      POSTGRES_PASSWORD: quarkus
    ports:
      - "5432:5432"

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

  # MongoDB for Rental service
  mongodb-rental:
    image: mongo:4.4
    container_name: mongodb-rental
    ports:
      - "27017:27017"

  # MongoDB for Billing service
  mongodb-billing:
    image: mongo:4.4
    container_name: mongodb-billing
    ports:
      - "27018:27017"

  # Kafka
  zookeeper:
    image: strimzi/kafka:latest-kafka-3.6.0
    container_name: zookeeper
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs

  kafka:
    image: strimzi/kafka:latest-kafka-3.6.0
    container_name: kafka
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties \
       --override listeners=$${KAFKA_LISTENERS} \
       --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} \
       --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  # MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_DATABASE: quarkus
      MYSQL_USER: quarkus
      MYSQL_PASSWORD: quarkus
      MYSQL_ROOT_PASSWORD: admin
    ports:
      - "3306:3306"

  # Prometheus and Grafana
  prometheus:
    image: docker.io/prom/prometheus:v2.44.0
    container_name: prometheus
    network_mode: host
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:Z
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: docker.io/grafana/grafana:9.5.2
    container_name: grafana
    network_mode: host
    volumes:
      - ./datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:Z
      - ./inventory-service-dashboard.json:/etc/grafana/provisioning/dashboards/inventory-service-dashboard.json:Z
      - ./dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml:Z
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  # Jaeger
  jaeger-all-in-one:
    image: docker.io/jaegertracing/all-in-one:1
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317"   # OTLP receiver